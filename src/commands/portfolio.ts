import type { ChatInputCommandInteraction, CommandInteraction } from 'discord.js'
import type { StockData } from '../types/stock'
import { SlashCommandBuilder } from 'discord.js'
import { StockManager } from '../utils/stockManager'

interface PortfolioResponse {
  stocks: StockData[]
  isMarketOpen: boolean
  totalValue: number
  totalProfitPercent: number
  totalInvestment: number
  totalProfit: number
}

export default {
  data: new SlashCommandBuilder()
    .setName('portfolio')
    .setDescription('Hi·ªÉn th·ªã chi ti·∫øt danh m·ª•c ƒë·∫ßu t∆∞')
    .addStringOption(option =>
      option
        .setName('channel')
        .setDescription('Ch·ªçn channel ƒë·ªÉ xem portfolio (m·∫∑c ƒë·ªãnh l√† channel hi·ªán t·∫°i)')
        .setRequired(false),
    ),

  async execute(interaction: ChatInputCommandInteraction) {
    await interaction.deferReply()

    const stockManager = new StockManager(interaction.user.id)
    const channelOption = interaction.options.getString('channel') || 'current'

    try {
      if (channelOption === 'all') {
        // Hi·ªÉn th·ªã portfolio t·ª´ t·∫•t c·∫£ c√°c channel
        const allPortfolios = await stockManager.getAllPortfolios()

        if (Object.keys(allPortfolios).length === 0) {
          await interaction.editReply('B·∫°n ch∆∞a c√≥ danh m·ª•c ƒë·∫ßu t∆∞ n√†o.')
          return
        }

        let combinedStocks: StockData[] = []
        let totalInvestment = 0
        let totalValue = 0

        // K·∫øt h·ª£p d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c channel
        for (const channelId in allPortfolios) {
          const channelPortfolio = await stockManager.getPortfolioDetails(channelId) as PortfolioResponse
          if (channelPortfolio.stocks.length > 0) {
            combinedStocks = [...combinedStocks, ...channelPortfolio.stocks]
            totalInvestment += channelPortfolio.totalInvestment
            totalValue += channelPortfolio.totalValue
          }
        }

        // T√≠nh to√°n l·ª£i nhu·∫≠n t·ªïng h·ª£p
        const totalProfit = totalValue - totalInvestment
        const totalProfitPercent = totalInvestment > 0 ? (totalProfit / totalInvestment) * 100 : 0

        // T·∫°o ƒë·ªëi t∆∞·ª£ng portfolio t·ªïng h·ª£p
        const combinedPortfolio: PortfolioResponse = {
          stocks: combinedStocks,
          isMarketOpen: stockManager.isMarketOpen(),
          totalValue,
          totalProfitPercent,
          totalInvestment,
          totalProfit,
        }

        // Hi·ªÉn th·ªã portfolio t·ªïng h·ª£p
        await displayPortfolio(interaction, combinedPortfolio, 'T·∫•t c·∫£ c√°c channel')
      }
      else if (channelOption === 'current') {
        // Hi·ªÉn th·ªã portfolio t·ª´ channel hi·ªán t·∫°i
        const portfolio = await stockManager.getPortfolioDetails(interaction.channelId) as PortfolioResponse

        if (!portfolio || portfolio.stocks.length === 0) {
          await interaction.editReply('Danh m·ª•c c·ªßa b·∫°n hi·ªán ƒëang tr·ªëng.')
          return
        }

        await displayPortfolio(interaction, portfolio, 'Channel hi·ªán t·∫°i')
      }
      else {
        // T√¨m channel theo t√™n
        const guild = interaction.guild
        if (!guild) {
          await interaction.editReply('L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong server.')
          return
        }

        // T√¨m channel theo t√™n (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
        const targetChannel = guild.channels.cache.find(
          channel => channel.name.toLowerCase() === channelOption.toLowerCase(),
        )

        if (!targetChannel) {
          await interaction.editReply(`Kh√¥ng t√¨m th·∫•y channel c√≥ t√™n "${channelOption}".`)
          return
        }

        console.log('Portfolio - Found channel by name:', {
          name: targetChannel.name,
          id: targetChannel.id,
          type: targetChannel.type
        })

        // L·∫•y portfolio t·ª´ channel ƒë√£ t√¨m th·∫•y
        const portfolio = await stockManager.getPortfolioDetails(targetChannel.id) as PortfolioResponse

        if (!portfolio || portfolio.stocks.length === 0) {
          await interaction.editReply(`Danh m·ª•c trong channel #${targetChannel.name} hi·ªán ƒëang tr·ªëng.`)
          return
        }

        await displayPortfolio(interaction, portfolio, `Channel #${targetChannel.name}`)
      }
    }
    catch (error) {
      console.error(error)
      await interaction.editReply('ƒê√£ x·∫£y ra l·ªói khi t·∫£i th√¥ng tin danh m·ª•c.')
    }
  },
}

// H√†m hi·ªÉn th·ªã portfolio
async function displayPortfolio(interaction: CommandInteraction | ChatInputCommandInteraction, portfolio: PortfolioResponse, sourceInfo: string): Promise<void> {
  // T√≠nh l√£i/l·ªó trong ng√†y c·ªßa to√†n danh m·ª•c
  const dailyProfitTotal = portfolio.stocks.reduce((sum, stock) => {
    const dailyProfitPerStock = (stock.current - stock.previousPrice) * stock.volume
    return sum + dailyProfitPerStock / 1000 // Chuy·ªÉn v·ªÅ ƒë∆°n v·ªã tri·ªáu
  }, 0)

  const dailyProfitPercent = (dailyProfitTotal / portfolio.totalValue) * 100

  // T·∫°o header cho danh m·ª•c
  let portfolioText = `üìä **Danh m·ª•c ƒë·∫ßu t∆∞ (${sourceInfo})**\n\n`
  portfolioText += `üí∞ **Gi√° tr·ªã v·ªën:** ${portfolio.totalInvestment.toLocaleString('vi-VN')} tr\n\n`
  portfolioText += `üìà **T·ªïng gi√° tr·ªã th·ªã tr∆∞·ªùng:** ${portfolio.totalValue.toLocaleString('vi-VN')} tr\n\n`
  portfolioText += `${portfolio.totalProfit >= 0 ? 'üü¢' : 'üî¥'} **L·ª£i nhu·∫≠n:** ${portfolio.totalProfit >= 0 ? '+' : ''}${portfolio.totalProfit.toLocaleString('vi-VN')} tr (${portfolio.totalProfitPercent.toFixed(1)}%)\n\n`
  portfolioText += `${dailyProfitTotal >= 0 ? 'üü¢' : 'üî¥'} **L√£i/L·ªó h√¥m nay:** ${dailyProfitTotal >= 0 ? '+' : ''}${dailyProfitTotal.toFixed(2)} tr (${dailyProfitPercent.toFixed(1)}%)\n\n`
  portfolioText += '**Chi ti·∫øt danh m·ª•c**\n'
  // T·∫°o b·∫£ng danh m·ª•c
  portfolioText += '```\n'
  portfolioText += 'M√£              | KL    | L√£i (tr)\n'
  portfolioText += '--------------  | ----- | ----------\n'

  // Th√™m t·ª´ng c·ªï phi·∫øu v√†o b·∫£ng
  for (const stock of portfolio.stocks) {
    // ƒê·ªãnh d·∫°ng gi√° hi·ªán t·∫°i v√† % thay ƒë·ªïi
    const priceChangePercent = stock.previousPercent.toFixed(1)
    const priceChangeSign = stock.previousPercent >= 0 ? '+' : ''
    const priceChange = `${priceChangeSign}${priceChangePercent}%`
    let priceTrendSymbol = ''
    switch (true) {
      case stock.previousPercent > 0:
        priceTrendSymbol = '‚Üë'
        break
      case stock.previousPercent < 0:
        priceTrendSymbol = '‚Üì'
        break
      default:
        priceTrendSymbol = '-'
        break
    }

    // D√≤ng 1: M√£, KL, L√£i
    portfolioText += `${stock.code.padEnd(15)} | ${stock.volume.toString().padEnd(5)} | ${stock.profit.toFixed(2)}\n`

    // D√≤ng 2: Gi√° hi·ªán t·∫°i v√† % bi·∫øn ƒë·ªông
    portfolioText += `${priceTrendSymbol} ${stock.current.toFixed(2).padEnd(5)} - ${priceChange.padEnd(4)} | ${' '.padEnd(5)} | ${stock.profitPercent.toFixed(1)}%\n`

    // Th√™m d√≤ng ph√¢n c√°ch
    portfolioText += '--------------  | ----- | ----------\n'
  }

  portfolioText += '```'

  // Th√™m th√¥ng tin c·∫≠p nh·∫≠t
  const timeString = new Date().toLocaleString("en-US", {
    timeZone: "Asia/Ho_Chi_Minh"
  });
  portfolioText += `\nC·∫≠p nh·∫≠t l√∫c: ${new Date(timeString).toLocaleTimeString('vi-VN')}`

  await interaction.editReply(portfolioText)
}
