/**
 * Handler for listing stocks in follow list
 */
import type { ChatInputCommandInteraction, TextChannel } from 'discord.js';
import { EmbedBuilder } from 'discord.js';
import { getFollowList } from '../../../follow/service';
import { fetchStockPrice } from '../../../api/stock';

/**
 * X·ª≠ l√Ω l·ªánh hi·ªÉn th·ªã danh s√°ch theo d√µi c·ªï phi·∫øu
 */
export async function handleListFollows(interaction: ChatInputCommandInteraction): Promise<void> {
  try {
    const channel = interaction.client.channels.cache.find((channel): channel is TextChannel => 
      channel.type === 0 && channel.name === 'follow'
    );
    if (!channel) {
      await interaction.editReply('Kh√¥ng t√¨m th·∫•y k√™nh follow');
      return;
    }

    const channelId = channel.id;
    const followList = await getFollowList(
      interaction.client,
      'system',
      channelId,
    );

    if (followList.stocks.length === 0) {
      await interaction.editReply('B·∫°n ch∆∞a c√≥ c·ªï phi·∫øu n√†o trong danh s√°ch theo d√µi.');
      return;
    }

    // T·∫°o embed ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin
    const embed = new EmbedBuilder()
      .setTitle('üîç Danh s√°ch theo d√µi c·ªï phi·∫øu')
      .setColor('#00a6ed')
      .setTimestamp();

    // L·∫•y gi√° hi·ªán t·∫°i c·ªßa c√°c c·ªï phi·∫øu
    for (const stock of followList.stocks) {
      const currentPrice = await fetchStockPrice(stock.symbol);
      
      // T·∫°o th√¥ng tin chi ti·∫øt cho m·ªói c·ªï phi·∫øu
      let stockInfo = '';
      
      // Th√™m th√¥ng tin t·ª´ng ƒëi·ªÉm theo d√µi
      for (let i = 0; i < stock.points.length; i++) {
        const point = stock.points[i];
        
        // T√≠nh to√°n c√°c ch·ªâ s·ªë
        const entryDiff = currentPrice ? ((currentPrice - point.entry) / point.entry * 100).toFixed(1) : 'N/A';
        const takeProfitDiff = currentPrice ? ((point.takeProfit - currentPrice) / currentPrice * 100).toFixed(1) : 'N/A';
        const stopLossDiff = currentPrice ? ((currentPrice - point.stopLoss) / point.stopLoss * 100).toFixed(1) : 'N/A';
        
        stockInfo += `**ƒêi·ªÉm theo d√µi ${i + 1}:**\n`;
        stockInfo += `üü¢ Gi√° mua: ${point.entry.toLocaleString('vi-VN')} ${currentPrice ? `(${entryDiff}%)` : ''}\n`;
        stockInfo += `üìà Gi√° m·ª•c ti√™u: ${point.takeProfit.toLocaleString('vi-VN')} ${currentPrice ? `(+${takeProfitDiff}%)` : ''}\n`;
        stockInfo += `üî¥ Gi√° c·∫Øt l·ªó: ${point.stopLoss.toLocaleString('vi-VN')} ${currentPrice ? `(${stopLossDiff}%)` : ''}\n`;
        stockInfo += `üìä Kh·ªëi l∆∞·ª£ng: ${point.volume.toLocaleString('vi-VN')}\n\n`;
      }
      
      // Th√™m gi√° hi·ªán t·∫°i
      if (currentPrice) {
        stockInfo = `üí∞ **Gi√° hi·ªán t·∫°i:** ${currentPrice.toLocaleString('vi-VN')}\n\n` + stockInfo;
      }
      
      // Th√™m th√¥ng tin c·ªßa c·ªï phi·∫øu v√†o embed
      embed.addFields({
        name: `üìå ${stock.symbol} (${stock.points.length} ƒëi·ªÉm theo d√µi)`,
        value: stockInfo,
        inline: false,
      });
    }

    await interaction.editReply({ embeds: [embed] });
  } catch (error) {
    console.error('Error in handleListFollows:', error);
    await interaction.editReply('‚ùå ƒê√£ x·∫£y ra l·ªói khi l·∫•y th√¥ng tin danh s√°ch theo d√µi');
  }
} 