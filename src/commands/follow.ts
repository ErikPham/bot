import type { ChatInputCommandInteraction, TextChannel } from 'discord.js'
import { EmbedBuilder, SlashCommandBuilder } from 'discord.js'
import { StockManager } from '../utils/stockManager'
import { Scheduler } from '../utils/scheduler'

export default {
  data: new SlashCommandBuilder()
    .setName('follow')
    .setDescription('Qu·∫£n l√Ω danh s√°ch theo d√µi c·ªï phi·∫øu')
    .addSubcommand(subcommand =>
      subcommand
        .setName('add')
        .setDescription('Th√™m ƒëi·ªÉm theo d√µi')
        .addStringOption(option =>
          option.setName('symbol')
            .setDescription('M√£ c·ªï phi·∫øu')
            .setRequired(true))
        .addNumberOption(option =>
          option.setName('entry')
            .setDescription('Gi√° mua (entry)')
            .setRequired(true))
        .addNumberOption(option =>
          option.setName('take_profit')
            .setDescription('Gi√° ch·ªët l·ªùi (take profit)')
            .setRequired(true))
        .addNumberOption(option =>
          option.setName('stop_loss')
            .setDescription('Gi√° c·∫Øt l·ªó (stop loss)')
            .setRequired(true))
        .addNumberOption(option =>
          option.setName('volume')
            .setDescription('Kh·ªëi l∆∞·ª£ng (volume)')
            .setRequired(true)))
    .addSubcommand(subcommand =>
      subcommand
        .setName('list')
        .setDescription('Xem danh s√°ch theo d√µi'))
    .addSubcommand(subcommand =>
      subcommand
        .setName('remove')
        .setDescription('X√≥a c·ªï phi·∫øu kh·ªèi danh s√°ch theo d√µi')
        .addStringOption(option =>
          option.setName('symbol')
            .setDescription('M√£ c·ªï phi·∫øu c·∫ßn x√≥a')
            .setRequired(true))
        .addNumberOption(option =>
          option.setName('entry')
            .setDescription('Entry mu·ªën x√≥a (n·∫øu kh√¥ng nh·∫≠p s·∫Ω x√≥a h·∫øt)')
            .setRequired(false))),

  async execute(interaction: ChatInputCommandInteraction) {
    await interaction.deferReply()

    const subcommand = interaction.options.getSubcommand()
    const stockManager = new StockManager(interaction.user.id)
    const scheduler = Scheduler.getInstance()

    try {
      switch (subcommand) {
        case 'add': {
          const symbol = interaction.options.getString('symbol', true)
          const entry = interaction.options.getNumber('entry', true)
          const takeProfit = interaction.options.getNumber('take_profit', true)
          const stopLoss = interaction.options.getNumber('stop_loss', true)
          const volume = interaction.options.getNumber('volume', true)

          await stockManager.addFollowPoint(interaction.channelId, symbol, entry, takeProfit, stopLoss, volume)
          await scheduler.startPriceCheck(interaction.channel as TextChannel)
          await interaction.editReply(`‚úÖ ƒê√£ th√™m ƒëi·ªÉm theo d√µi cho ${symbol}:
üü¢ Entry: ${entry.toLocaleString('vi-VN')}
üéØ TP: ${takeProfit.toLocaleString('vi-VN')}
üõë SL: ${stopLoss.toLocaleString('vi-VN')}
üì¶ Volume: ${volume.toLocaleString('vi-VN')}`)
          break
        }

        case 'list': {
          const followList = await stockManager.getFollowList(interaction.channelId)

          if (followList.stocks.length === 0) {
            await interaction.editReply('B·∫°n ch∆∞a c√≥ c·ªï phi·∫øu n√†o trong danh s√°ch theo d√µi.')
            return
          }

          const embed = new EmbedBuilder()
            .setTitle('üìä Danh s√°ch ƒëi·ªÉm mua/b√°n ƒëang theo d√µi')
            .setColor('#0099ff')
            .setTimestamp()

          for (const stock of followList.stocks) {
            const currentPrice = await stockManager.fetchStockPrice(stock.symbol)
            const priceInfo = currentPrice 
              ? `\nüí∞ Gi√° hi·ªán t·∫°i: ${currentPrice.toLocaleString('vi-VN')}`
              : '\n‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y gi√° hi·ªán t·∫°i'

            const pointsText = stock.points.map((point, index) => {
              const entryDiff = currentPrice ? (((currentPrice - point.entry) / point.entry) * 100).toFixed(1) : '?'
              const tpDiff = (((point.takeProfit - point.entry) / point.entry) * 100).toFixed(1)
              const slDiff = (((point.stopLoss - point.entry) / point.entry) * 100).toFixed(1)
              return `${index + 1}. üü¢ Entry: ${point.entry.toLocaleString('vi-VN')} (${entryDiff}%) | üéØ TP: ${point.takeProfit.toLocaleString('vi-VN')} (${tpDiff}%) | üõë SL: ${point.stopLoss.toLocaleString('vi-VN')} (${slDiff}%) | üì¶ Vol: ${point.volume.toLocaleString('vi-VN')}`
            }).join('\n')

            embed.addFields({
              name: `üìà ${stock.symbol}${priceInfo}`,
              value: pointsText,
              inline: false,
            })
          }

          embed.setFooter({ text: 'S·ª≠ d·ª•ng /follow remove symbol:<m√£> ƒë·ªÉ x√≥a c·ªï phi·∫øu kh·ªèi danh s√°ch theo d√µi' })
          await interaction.editReply({ embeds: [embed] })
          break
        }

        case 'remove': {
          const symbol = interaction.options.getString('symbol', true)
          const entry = interaction.options.getNumber('entry')
          const success = await stockManager.removeFollowPoint(interaction.channelId, symbol, entry)
          if (success) {
            await interaction.editReply(`‚úÖ ƒê√£ x√≥a ${symbol} kh·ªèi danh s√°ch theo d√µi`)
          } else {
            await interaction.editReply('‚ùå Kh√¥ng t√¨m th·∫•y c·ªï phi·∫øu trong danh s√°ch theo d√µi.')
          }
          break
        }
      }
    }
    catch (error) {
      console.error(error)
      await interaction.editReply('‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh.')
    }
  },
} 