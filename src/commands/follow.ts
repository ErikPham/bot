import type { ChatInputCommandInteraction } from 'discord.js'
import { EmbedBuilder, SlashCommandBuilder } from 'discord.js'
import { StockManager } from '../utils/stockManager'
import { Scheduler } from '../utils/scheduler'

export default {
  data: new SlashCommandBuilder()
    .setName('follow')
    .setDescription('Qu·∫£n l√Ω danh s√°ch theo d√µi c·ªï phi·∫øu')
    .addSubcommand(subcommand =>
      subcommand
        .setName('add')
        .setDescription('Th√™m ƒëi·ªÉm theo d√µi')
        .addStringOption(option =>
          option.setName('symbol')
            .setDescription('M√£ c·ªï phi·∫øu')
            .setRequired(true))
        .addNumberOption(option =>
          option.setName('buy_price')
            .setDescription('Gi√° mua')
            .setRequired(true))
        .addNumberOption(option =>
          option.setName('sell_price')
            .setDescription('Gi√° b√°n')
            .setRequired(true)))
    .addSubcommand(subcommand =>
      subcommand
        .setName('list')
        .setDescription('Xem danh s√°ch theo d√µi'))
    .addSubcommand(subcommand =>
      subcommand
        .setName('remove')
        .setDescription('X√≥a c·ªï phi·∫øu kh·ªèi danh s√°ch theo d√µi')
        .addStringOption(option =>
          option.setName('symbol')
            .setDescription('M√£ c·ªï phi·∫øu c·∫ßn x√≥a')
            .setRequired(true))),

  async execute(interaction: ChatInputCommandInteraction) {
    await interaction.deferReply()

    const subcommand = interaction.options.getSubcommand()
    const stockManager = new StockManager(interaction.user.id)
    const scheduler = Scheduler.getInstance()

    try {
      switch (subcommand) {
        case 'add': {
          const symbol = interaction.options.getString('symbol', true)
          const buyPrice = interaction.options.getNumber('buy_price', true)
          const sellPrice = interaction.options.getNumber('sell_price', true)

          await stockManager.addFollowPoint(interaction.channelId, symbol, buyPrice, sellPrice)
          await scheduler.startPriceCheck(interaction.channelId)
          await interaction.editReply(`‚úÖ ƒê√£ th√™m ƒëi·ªÉm theo d√µi cho ${symbol}:\nüü¢ Mua: ${buyPrice.toLocaleString('vi-VN')}\nüî¥ B√°n: ${sellPrice.toLocaleString('vi-VN')}\n\nBot s·∫Ω t·ª± ƒë·ªông th√¥ng b√°o khi gi√° ƒë·∫°t ƒëi·ªÉm mua/b√°n.`)
          break
        }

        case 'list': {
          const followList = await stockManager.getFollowList(interaction.channelId)

          if (followList.stocks.length === 0) {
            await interaction.editReply('B·∫°n ch∆∞a c√≥ c·ªï phi·∫øu n√†o trong danh s√°ch theo d√µi.')
            return
          }

          const embed = new EmbedBuilder()
            .setTitle('üìä Danh s√°ch ƒëi·ªÉm mua/b√°n ƒëang theo d√µi')
            .setColor('#0099ff')
            .setTimestamp()

          for (const stock of followList.stocks) {
            const currentPrice = await stockManager.fetchStockPrice(stock.symbol)
            const priceInfo = currentPrice 
              ? `\nüí∞ Gi√° hi·ªán t·∫°i: ${currentPrice.toLocaleString('vi-VN')}`
              : '\n‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y gi√° hi·ªán t·∫°i'

            const pointsText = stock.points.map((point, index) => {
              const buyDiff = currentPrice ? ((currentPrice - point.buyPrice) / point.buyPrice * 100).toFixed(1) : '?'
              const sellDiff = currentPrice ? ((point.sellPrice - currentPrice) / currentPrice * 100).toFixed(1) : '?'
              return `${index + 1}. üü¢ Mua: ${point.buyPrice.toLocaleString('vi-VN')} (${buyDiff}%) - üî¥ B√°n: ${point.sellPrice.toLocaleString('vi-VN')} (${sellDiff}%)`
            }).join('\n')

            embed.addFields({
              name: `üìà ${stock.symbol}${priceInfo}`,
              value: pointsText,
              inline: false,
            })
          }

          embed.setFooter({ text: 'S·ª≠ d·ª•ng /follow remove symbol:<m√£> ƒë·ªÉ x√≥a c·ªï phi·∫øu kh·ªèi danh s√°ch theo d√µi' })
          await interaction.editReply({ embeds: [embed] })
          break
        }

        case 'remove': {
          const symbol = interaction.options.getString('symbol', true)
          const success = await stockManager.removeFollowPoint(interaction.channelId, symbol)
          if (success) {
            await interaction.editReply(`‚úÖ ƒê√£ x√≥a ${symbol} kh·ªèi danh s√°ch theo d√µi`)
          } else {
            await interaction.editReply('‚ùå Kh√¥ng t√¨m th·∫•y c·ªï phi·∫øu trong danh s√°ch theo d√µi.')
          }
          break
        }
      }
    }
    catch (error) {
      console.error(error)
      await interaction.editReply('‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh.')
    }
  },
} 